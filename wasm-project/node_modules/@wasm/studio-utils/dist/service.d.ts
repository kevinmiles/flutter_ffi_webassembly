import { File, Project } from "./model";
export declare enum Language {
    C = "c",
    Cpp = "cpp",
    Wat = "wat",
    Wasm = "wasm",
    Rust = "rust",
    Cretonne = "cton",
    x86 = "x86",
    Json = "json",
    JavaScript = "javascript",
    TypeScript = "typescript",
    Text = "text",
}
export interface IServiceRequestTask {
    file: string;
    name: string;
    output: string;
    console: string;
    success: boolean;
}
export interface IServiceRequest {
    success: boolean;
    tasks: IServiceRequestTask[];
    output: string;
}
export declare enum ServiceTypes {
    Rustc = 0,
    Service = 1,
}
export declare class Service {
    static sendRequestJSON(content: Object, to: ServiceTypes): Promise<IServiceRequest>;
    static sendRequest(content: string, to: ServiceTypes): Promise<IServiceRequest>;
    static compileFile(file: File, from: Language, to: Language, options?: string): Promise<any>;
    static compile(src: string | ArrayBuffer, from: Language, to: Language, options?: string): Promise<IServiceRequest>;
    static disassembleWasm(buffer: ArrayBuffer): Promise<string>;
    static disassembleWasmWithWabt(file: File): Promise<void>;
    static assembleWat(wat: string): Promise<ArrayBuffer>;
    static assembleWatWithWabt(file: File): Promise<void>;
    static loadProject(json: any, project: Project): Promise<any>;
    static lazyLoad(uri: string): Promise<any>;
    static disassembleWasmWithBinaryen(file: File): Promise<void>;
    static convertWasmToAsmWithBinaryen(file: File): Promise<void>;
    static compileMarkdownToHtml(src: string): Promise<string>;
}
